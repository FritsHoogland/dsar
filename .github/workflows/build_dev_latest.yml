name: build

on:
  push:
    branches: [ dev ]

env:
  CARGO_TERM_COLOR: always

jobs:
  recreate_latest_release:
    runs-on: ubuntu-latest
    steps:
    - name: (re)create latest release
      uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: "latest"
        prerelease: true
        title: "Development Build"

  build_centos_7:
    if: false
    runs-on: ubuntu-latest
    container: centos:7
    needs: recreate_latest_release
    steps:
    - name: add operating system packages
      run: yum install -y openssl-devel gcc cmake gcc-c++ freetype-devel expat-devel open-sans-fonts fontconfig-devel
    - name: install rust
      run: curl https://sh.rustup.rs -sSf | sh -s -- -y
    - name: add rust to path
      run: echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      # v4 results in glibc/abi issues
    - name: checkout code
      uses: actions/checkout@v3
    - name: build
      run: cargo build --release
    - name: strip executable
      run: strip -s target/release/dsar
    - name: install cargo-generate-rpm
      run: cargo install cargo-generate-rpm --version 0.11.0 --force
    - name: generate rpm
      run: cargo generate-rpm --payload-compress=gzip -s 'release = "el.7"'
    - name: upload rpm to release
      uses: "AButler/upload-release-assets@v2.0"
      with:
        files: 'target/generate-rpm/*'
        repo-token: "${{ secrets.GITHUB_TOKEN }}"
        release-tag: "latest"
      
  build_rocky_8:
    if: false
    runs-on: ubuntu-latest
    container: rockylinux:8
    needs: recreate_latest_release
    steps:
    - name: add operating system packages
      run: yum install -y openssl-devel gcc cmake gcc-c++ freetype-devel expat-devel open-sans-fonts fontconfig-devel
    - name: install rust
      run: curl https://sh.rustup.rs -sSf | sh -s -- -y
    - name: add rust to path
      run: echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    - name: checkout code
      uses: actions/checkout@v4
    - name: build
      run: cargo build --release
    - name: strip executable
      run: strip -s target/release/dsar
    - name: install cargo-generate-rpm
      run: cargo install cargo-generate-rpm
    - name: generate rpm
      run: cargo generate-rpm -s 'release = "el.8"'
    - name: upload rpm to release
      uses: "AButler/upload-release-assets@v2.0"
      with:
        files: 'target/generate-rpm/*'
        repo-token: "${{ secrets.GITHUB_TOKEN }}"
        release-tag: "latest"
      
  build_rocky_9:
    if: false
    runs-on: ubuntu-latest
    container: rockylinux:8
    needs: recreate_latest_release
    steps:
    - name: add operating system packages
      run: yum install -y openssl-devel gcc cmake gcc-c++ freetype-devel expat-devel open-sans-fonts fontconfig-devel
    - name: install rust
      run: curl https://sh.rustup.rs -sSf | sh -s -- -y
    - name: add rust to path
      run: echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    - name: checkout code
      uses: actions/checkout@v4
    - name: build
      run: cargo build --release
    - name: strip executable
      run: strip -s target/release/dsar
    - name: install cargo-generate-rpm
      run: cargo install cargo-generate-rpm
    - name: generate rpm
      run: cargo generate-rpm -s 'release = "el.9"'
    - name: upload rpm to release
      uses: "AButler/upload-release-assets@v2.0"
      with:
        files: 'target/generate-rpm/*'
        repo-token: "${{ secrets.GITHUB_TOKEN }}"
        release-tag: "latest"
      
  build_macos_latest:
    if: true
    runs-on: macos-latest
    needs: recreate_latest_release
    strategy:
      matrix:
        target:
          - x86_64-apple-darwin
          - aarch64-apple-darwin

    steps:

    - uses: actions/checkout@v4

    - name: install rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}
        override: true

    - name: cargo build --release
      uses: actions-rs/cargo@v1
      with:
        use-cross: true
        command: build
        args: --release --target=${{ matrix.target }}
   
    - name: obtain current app version
      run: echo "CARGO_APP_VERSION=$(grep ^version Cargo.toml | sed 's/.*"\(.*\)"/\1/')" >> $GITHUB_ENV    

    - name: strip and tar up executable
      run: |
        strip -S target/${{ matrix.target}}/release/dsar
        tar czvf dsar-${{ matrix.target }}-v${{ env.CARGO_APP_VERSION }}-1.tar.gz -C target/${{ matrix.target }}/release dsar

    - name: upload rpm to release
      uses: "AButler/upload-release-assets@v2.0"
      with:
        files: dsar-${{ matrix.target }}-v${{ env.CARGO_APP_VERSION }}-1.tar.gz
        repo-token: "${{ secrets.GITHUB_TOKEN }}"
        release-tag: "latest"

